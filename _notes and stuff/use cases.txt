import transkrit

T = transkrit.Transliterator(reset=False)
	initialization: self.TransliterationSettings()
		if no --reset flag (two kinds: passed/command-line args), loads from settings file if it exists

T.transliterate(content, from=None, to=None)
	if self.Settings.from is None: prompt("Input format:", choices)
	if self.Settings.to is None: prompt("Output format:", choices)
	...does work...
	returns string



import scanskrit

S = scanskrit.Scanner()
	initialization: self.Transliterator.Settings = transkrit.TransliterationSettings()
		if no --reset flag (only command-line arg), loads from settings file if it exists

S.scan(content)
	if self.Settings.from is None: prompt("Input format:", choices)
	...does work...
	returns scanned_content = scanskrit.Scanned() object

scanned_content.identify()
	...does work...
	returns one-line answer (even if "don't know")



import alphaskritize

A = alphaskritize.Alphabetizer()
	initialization: self.Settings = transkrit.TransliterationSettings()
		if no --reset flag (only command-line arg), loads from settings file if it exists

A.alphabetize(content_list)
	if self.Settings.from is None: prompt("Input format:", choices)
	...does work...
	returns alphabetized_content_list



import space_destruction

D = space_destruction.Destroyer()
	initialization: self.Settings = transkrit.TransliterationSettings()
		if no --reset flag (only command-line arg), loads from settings file if it exists

S.scan(content)
	if self.Settings.from is None: prompt("Input format:", choices)
	...does work...
	returns string
